#!/usr/bin/env python3
"""
interface-kbps gets the download/upload rate for the specified interface
"""

# pylint: disable=global-statement
# pylint: disable=broad-except
# pylint: disable=too-many-instance-attributes

import sys
import getopt
import json
import collections
import time
import os

opts = None

class Options():
    """Options parses the command line arguments"""

    def __init__(self):
        self.licenses_filename = '/etc/config/licenses.json'
        self.device = None
        self.direction = None
        self.desired_kbps = None
        self.licenses = None
        self.boardname = None

    def set_licenses_filename(self, arg):
        """Set filename argument"""
        self.licenses_filename = arg

    def set_boardname(self, arg):
        """Set boardname argument"""
        self.boardname = arg

    def parse_args(self):
        """Parse command line arguments"""
        handlers = {
            '-l': self.set_licenses_filename,
            '-b': self.set_boardname,
        }

        try:
            (optlist, args) = getopt.getopt(sys.argv[1:], 'l:b:')
            for opt in optlist:
                handlers[opt[0]](opt[1])
            if len(args) != 1:
                print("Missing required arguments")
                print_usage(1)
            self.desired_kbps = int(args[0])
            return
        except getopt.GetoptError as exc:
            print(exc)
            print_usage(1)

def errexit():
    """Cleanup and exit with specified code"""
    global opts
    print(opts.desired_kbps)
    exit(1)

def print_usage(exit_code):
    """Print usage"""
    sys.stderr.write("""\
%s Usage: %s <desired_kbps>
  optional args:
    -l <file>   : licenses filename (default: /etc/config/licenses.json)
""" % (sys.argv[0], sys.argv[0]))
    exit(exit_code)

def read_licenses():
    """
    Read and parse the licenses file
    """
    global opts
    try:
        licenses_file = open(opts.licenses_filename, 'r')
        licenses_data = licenses_file.read()
        licenses_file.close()
        opts.licenses = json.loads(licenses_data, object_pairs_hook=collections.OrderedDict)
    except IOError as exc:
        print("Unable to read licenses file.", exc, file=sys.stderr, flush=True)
        errexit()

def get_entitlement_speed(licenses):
    """
    get the max entitlement
    """
    liclist = licenses.get("list")
    if liclist is None:
        print("Failed to parse licenses", file=sys.stderr, flush=True)
        errexit()
    try:
        for lic in liclist:
            if lic.get("name") == "untangle-node-throughput":
                return lic.get("seats")*1024
    except Exception as exc:
        print("Unable to parse licenses.", exc, file=sys.stderr, flush=True)
    return None

def get_board_name():
    """
    read the board name
    """
    global opts
    try:
        boardname_file = open('/tmp/sysinfo/board_name', 'r')
        opts.boardname = boardname_file.read()
        boardname_file.close()
    except IOError as exc:
        print("Unable to read boardname file.", exc, file=sys.stderr, flush=True)
        errexit()

def main():
    """main"""
    global opts
    opts = Options()
    opts.parse_args()

    get_board_name()

    read_licenses()
    entitlement = get_entitlement_speed(opts.licenses)

    # linksys exempt
    if "linksys" in opts.boardname:
        print(opts.desired_kbps)
        exit(0)

    # if no entitlement found
    # If the appliances is not a Linksys Router, and no licensing is found, then the desired limit is 100 Mbps for a new appliance
    # If the appliance should have a license and it doesn't, then all features will work and the Limit is set to 10 Mbps
    if entitlement is None:
        now = time.time()
        creation = os.path.getctime("/etc/config/uid")
        if (now - creation) // (24 * 3600) >= 14:
            entitlement = 10*1024 #10*1024 Kbps = 10Mbit
        else:
            entitlement = 10*1024 #100*1024 Kbps = 100Mbit

    if opts.desired_kbps < entitlement:
        print(opts.desired_kbps)
    else:
        print(entitlement)
    exit(0)

main()
